
data "aws_acm_certificate" "cert" {
  domain      = var.domain
  statuses    = ["ISSUED"]
  most_recent = true
}
resource "aws_cloudwatch_log_group" "ecs_logs" {
  name              = "/ecs/ecs-logs"
  retention_in_days = 30
  kms_key_id        = aws_kms_key.ecs_execute_command.arn
}
resource "aws_instance" "bastion" {
  ami           = "ami-012261b9035f8f938" # Amazon Linux 2 AMI ID
  instance_type = "t2.micro"

  key_name = aws_key_pair.deployer.key_name

  vpc_security_group_ids = [aws_security_group.bastion.id]

  subnet_id = aws_subnet.public.id # パブリックサブネットのID

  tags = {
    Name = "Bastion"
  }
}

output "ec2_public_ip" {
  value       = aws_instance.bastion.public_ip
  description = "The public IP address of the Bastion host"
}

resource "aws_ecr_repository" "main" {
  name                 = "main"
  image_tag_mutability = "MUTABLE"
  force_delete         = true
  image_scanning_configuration {
    scan_on_push = true
  }
}
output "repository_url" {
  value = aws_ecr_repository.main.repository_url
}
resource "aws_ecs_cluster" "main" {
  name = "${var.app_name}-cluster"

  configuration {
    execute_command_configuration {
      kms_key_id = aws_kms_key.ecs_execute_command.arn
      logging    = "OVERRIDE"

      log_configuration {
        cloud_watch_encryption_enabled = true
        cloud_watch_log_group_name     = aws_cloudwatch_log_group.ecs_logs.name
      }
    }
  }
}
resource "aws_ecs_service" "ecs_service" {
  name                   = "${var.app_name}-service"
  cluster                = aws_ecs_cluster.main.id
  task_definition        = aws_ecs_task_definition.ecs_task_definition.arn
  launch_type            = "FARGATE"
  desired_count          = 1
  enable_execute_command = true
  depends_on             = [aws_lb.lb, aws_lb_target_group.lb_tg]

  network_configuration {
    subnets         = [aws_subnet.private.id]
    security_groups = [aws_security_group.ecs_tasks.id]
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.lb_tg.arn
    container_name   = var.app_name
    container_port   = 80
  }
}
resource "aws_security_group_rule" "ecs_http" {
  type        = "ingress"
  from_port   = 80
  to_port     = 80
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.ecs_tasks.id
}

resource "aws_security_group_rule" "ecs_https" {
  type        = "ingress"
  from_port   = 443
  to_port     = 443
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.ecs_tasks.id
}
resource "aws_ecs_task_definition" "ecs_task_definition" {
  family                   = var.app_name
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "512"  # FIXNE: 必要なければ256に変更
  memory                   = "1024" # FIXNE: 必要なければ512に変更
  execution_role_arn       = aws_iam_role.ecs_execution_role.arn
  task_role_arn            = aws_iam_role.ecs_execution_role.arn

  container_definitions = jsonencode([
    {
      name    = "${var.app_name}",
      image   = aws_ecr_repository.main.repository_url, # ECRのURLを指定
      command = ["/var/www/html/entrypoint.sh"]
      portMappings = [
        {
          containerPort = 80,
          hostPort      = 80
        },
      ],
      logConfiguration = {
        logDriver = "awslogs",
        options = {
          "awslogs-group"         = aws_cloudwatch_log_group.ecs_logs.name,
          "awslogs-region"        = var.region,
          "awslogs-stream-prefix" = "ecs"
        }
      },
      "secrets" : [
        {
          name      = "APP_KEY",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_KEY::"
        },

        {
          name      = "APP_NAME",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_NAME::"
        },
        {
          name      = "APP_ENV",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_ENV::"
        },
        {
          name      = "APP_DEBUG",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_DEBUG::"
        },
        {
          name      = "APP_URL",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_URL::"
        },
        {
          name      = "APP_TIMEZONE",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:APP_TIMEZONE::"
        },
        {
          name      = "LOG_CHANNEL",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:LOG_CHANNEL::"
        },
        {
          name      = "LOG_DEPRECATIONS_CHANNEL",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:LOG_DEPRECATIONS_CHANNEL::"
          }, {
          name      = "LOG_LEVEL",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:LOG_LEVEL::"
        },
        {
          name      = "DB_CONNECTION",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_CONNECTION::"
        },
        {
          name      = "DB_HOST",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_HOST::"
        },
        {
          name      = "DB_PORT",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_PORT::"
        },
        {
          name      = "DB_DATABASE",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_DATABASE::"
        },
        {
          name      = "DB_USERNAME",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_USERNAME::"
        },
        {
          name      = "DB_PASSWORD",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:DB_PASSWORD::"
        },
        {
          name      = "BROADCAST_DRIVER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:BROADCAST_DRIVER::"
        },
        {
          name      = "CACHE_DRIVER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:CACHE_DRIVER::"
        },
        {
          name      = "FILESYSTEM_DRIVER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:FILESYSTEM_DRIVER::"
        },
        {
          name      = "QUEUE_CONNECTION",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:QUEUE_CONNECTION::"
        },
        {
          name      = "SESSION_DRIVER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:SESSION_DRIVER::"
        },
        {
          name      = "SESSION_LIFETIME",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:SESSION_LIFETIME::"
        },
        {
          name      = "MEMCACHED_HOST",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MEMCACHED_HOST::"
        },
        {
          name      = "REDIS_HOST",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:REDIS_HOST::"
        },
        {
          name      = "REDIS_PASSWORD",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:REDIS_PASSWORD::"
        },
        {
          name      = "REDIS_PORT",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:REDIS_PORT::"
        },
        {
          name      = "MAIL_MAILER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_MAILER::"
        },
        {
          name      = "MAIL_HOST",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_HOST::"
        },
        {
          name      = "MAIL_PORT",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_PORT::"
        },
        {
          name      = "MAIL_USERNAME",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_USERNAME::"
        },
        {
          name      = "MAIL_PASSWORD",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_PASSWORD::"
        },
        {
          name      = "MAIL_ENCRYPTION",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_ENCRYPTION::"
        },
        {
          name      = "MAIL_FROM_ADDRESS",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_FROM_ADDRESS::"
        },
        {
          name      = "MAIL_FROM_NAME",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MAIL_FROM_NAME::"
        },
        {
          name      = "MIX_PUSHER_APP_KEY",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MIX_PUSHER_APP_KEY::"
        },
        {
          name      = "MIX_PUSHER_APP_CLUSTER",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:MIX_PUSHER_APP_CLUSTER::"
        },
        {
          name      = "FIREBASE_CREDENTIALS",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:FIREBASE_CREDENTIALS::"
        },
        {
          name      = "SPEC_PATH",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:SPEC_PATH::"
        },
        {
          name      = "SAIL_XDEBUG_MODE",
          valueFrom = "${data.aws_secretsmanager_secret_version.secrets.arn}:SAIL_XDEBUG_MODE::"
        }

      ]
    },
  ])

}
resource "aws_lb" "lb" {
  name               = "${var.app_name}-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.ecs_tasks.id]
  subnets            = [aws_subnet.public.id, aws_subnet.public2.id]

  enable_deletion_protection = false
}

output "elb_dns_name" {
  value       = aws_lb.lb.dns_name
  description = "The DNS name of the load balancer"
}
resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.lb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.lb_tg.arn
  }
}

resource "aws_lb_listener" "https" {
  load_balancer_arn = aws_lb.lb.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = data.aws_acm_certificate.cert.arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.lb_tg.arn
  }
}
resource "aws_lb_target_group" "lb_tg" {
  name        = "${var.app_name}-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.main.id
  target_type = "ip"

  health_check {
    enabled = true
    path    = "/" # アプリケーションのヘルスチェック用パス
  }
}
resource "aws_iam_role" "ecs_execution_role" {
  name = "h4b-ecs-task-execution-role"

  assume_role_policy = <<-EOS
  {
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
  }
  EOS
}

resource "aws_iam_policy" "ecs_execution_role_policy" {
  name   = "h4b-ecs-task-execution-role-policy"
  policy = <<-EOS
  {
      "Version": "2012-10-17",
      "Statement": [
          {
              "Effect": "Allow",
              "Action": [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:GetRepositoryPolicy",
                  "ecr:DescribeRepositories",
                  "ecr:ListImages",
                  "ecr:DescribeImages",
                  "ecr:BatchGetImage",
                  "ecr:GetLifecyclePolicy",
                  "ecr:GetLifecyclePolicyPreview",
                  "ecr:ListTagsForResource",
                  "ecr:DescribeImageScanFindings",
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams",
                  "ssmmessages:CreateControlChannel",
                  "ssmmessages:CreateDataChannel",
                  "ssmmessages:OpenControlChannel",
                  "ssmmessages:OpenDataChannel",
                  "ssm:StartSession",
                  "kms:Decrypt",
                  "logs:DescribeLogGroups"
              ],
              "Resource": "*"
          }
      ]
  }
  EOS
}

resource "aws_iam_role_policy_attachment" "ecs_execution_role_policy" {
  role       = aws_iam_role.ecs_execution_role.name
  policy_arn = aws_iam_policy.ecs_execution_role_policy.arn
}


resource "aws_iam_role" "ssm_role_for_ecs_troubleshooting" {
  name = "SSMRoleForECSTroubleshooting"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "ssm.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "ssm_policy_for_ecs_troubleshooting" {
  name = "SSMPolicyForECSTroubleshooting"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "cloudtrail:LookupEvents",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeIamInstanceProfileAssociations",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ecr:DescribeImages",
          "ecr:GetRepositoryPolicy",
          "ecs:DescribeContainerInstances",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTasks",
          "iam:AttachRolePolicy",
          "iam:CreateRole",
          "iam:DeleteRole",
          "iam:DetachRolePolicy",
          "iam:GetInstanceProfile",
          "iam:GetRole",
          "iam:ListRoles",
          "iam:PassRole",
          "iam:SimulateCustomPolicy",
          "iam:SimulatePrincipalPolicy",
          "kms:DescribeKey",
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:InvokeFunction",
          "lambda:TagResource",
          "logs:DescribeLogGroups",
          "logs:PutRetentionPolicy",
          "secretsmanager:DescribeSecret",
          "ssm:DescribeParameters"
        ],
        "Resource" : "*"
      },
      {
        "Effect" : "Allow",
        "Action" : [
          "sts:GetCallerIdentity"
        ],
        "Resource" : "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ssm_policy_attachment" {
  role       = aws_iam_role.ssm_role_for_ecs_troubleshooting.name
  policy_arn = aws_iam_policy.ssm_policy_for_ecs_troubleshooting.arn
}

resource "aws_iam_policy" "ecs_secrets" {
  name   = "ecs_secrets"
  policy = <<-EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "ecs_secrets" {
  role       = aws_iam_role.ecs_execution_role.name
  policy_arn = aws_iam_policy.ecs_secrets.arn
}
resource "tls_private_key" "private_key" {
  algorithm = "RSA"
}

resource "aws_key_pair" "deployer" {
  key_name   = "deployer-key"
  public_key = tls_private_key.private_key.public_key_openssh
}

resource "local_sensitive_file" "private_key" {
  content         = tls_private_key.private_key.private_key_pem
  filename        = "${path.module}/privates/private_key.pem"
  file_permission = "0600"
}
resource "aws_kms_key" "ecs_execute_command" {
  description = "KMS key for ECS execute command"
  policy      = <<POLICY
{
  "Version": "2012-10-17",
  "Id": "key-default-1",
  "Statement": [
    {
      "Sid": "Enable IAM User Permissions",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::${var.account_id}:root"
      },
      "Action": "kms:*",
      "Resource": "*"
    },
    {
      "Sid": "Allow CloudWatch Logs",
      "Effect": "Allow",
      "Principal": {
        "Service": "logs.amazonaws.com"
      },
      "Action": [
        "kms:Encrypt*",
        "kms:Decrypt*",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*",
        "kms:Describe*"
      ],
      "Resource": "*"
    }
  ]
}
POLICY
}
provider "aws" {
  profile = "terraform"
  region  = var.region
}
resource "aws_db_parameter_group" "parameter_group" {
  name        = "${var.app_name}-db-parameter-group"
  family      = "mysql8.0"
  description = "Custom parameter group"

  parameter {
    name  = "character_set_server"
    value = "utf8mb4"
  }

  parameter {
    name  = "collation_server"
    value = "utf8mb4_bin"
  }
}


resource "aws_db_instance" "rds" {
  allocated_storage                   = 20
  engine                              = "mysql"
  engine_version                      = "8.0.34"
  instance_class                      = "db.t2.micro"
  identifier                          = "${var.app_name}-db"
  username                            = data.aws_secretsmanager_secret_version.db_username.secret_string
  password                            = data.aws_secretsmanager_secret_version.db_password.secret_string
  parameter_group_name                = aws_db_parameter_group.parameter_group.name
  vpc_security_group_ids              = [aws_security_group.rds.id]
  db_subnet_group_name                = aws_db_subnet_group.main.name
  skip_final_snapshot                 = true
  iam_database_authentication_enabled = true
  db_name                             = var.db_name

  lifecycle {
    ignore_changes = [password]
  }
}

output "db_endpoint" {
  value       = aws_db_instance.rds.endpoint
  description = "The connection endpoint for the RDS instance"
}
data "aws_route53_zone" "hosted_zone" {
  name = var.domain
}

resource "aws_route53_record" "A" {
  zone_id = data.aws_route53_zone.hosted_zone.zone_id
  name    = var.domain
  type    = "A"

  alias {
    name                   = aws_lb.lb.dns_name
    zone_id                = aws_lb.lb.zone_id
    evaluate_target_health = true
  }
}


data "aws_secretsmanager_secret" "secrets" {
  name = "${terraform.workspace}-${var.secret_name}"
}

data "aws_secretsmanager_secret_version" "secrets" {
  secret_id = data.aws_secretsmanager_secret.secrets.id
}

data "aws_secretsmanager_secret" "db_username" {
  name = "${terraform.workspace}-DB_USERNAME"
}

data "aws_secretsmanager_secret_version" "db_username" {
  secret_id = data.aws_secretsmanager_secret.db_username.id
}

data "aws_secretsmanager_secret" "db_password" {
  name = "${terraform.workspace}-DB_PASSWORD"
}

data "aws_secretsmanager_secret_version" "db_password" {
  secret_id = data.aws_secretsmanager_secret.db_password.id
}
resource "aws_security_group" "ecs_tasks" {
  name        = "ecs-tasks"
  description = "Allow ECS tasks"
  vpc_id      = aws_vpc.main.id
}

resource "aws_security_group_rule" "ingress_sg_all" {
  from_port                = 0
  to_port                  = 0
  protocol                 = "-1"
  security_group_id        = aws_security_group.ecs_tasks.id
  source_security_group_id = aws_security_group.ecs_tasks.id
  type                     = "ingress"
}

resource "aws_security_group_rule" "egress_all_all" {
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  security_group_id = aws_security_group.ecs_tasks.id
  type              = "egress"
  cidr_blocks       = ["0.0.0.0/0"]
}

resource "aws_security_group" "rds" {
  name        = "rds"
  description = "Allow RDS"
  vpc_id      = aws_vpc.main.id
}

resource "aws_security_group_rule" "rds_ingress" {
  type                     = "ingress"
  from_port                = 3306
  to_port                  = 3306
  protocol                 = "tcp"
  source_security_group_id = aws_security_group.ecs_tasks.id
  security_group_id        = aws_security_group.rds.id
}

resource "aws_security_group" "bastion" {
  name        = "bastion"
  description = "Allow SSH inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["58.188.94.17/32"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group_rule" "rds_ingress_from_bastion" {
  type                     = "ingress"
  from_port                = 3306
  to_port                  = 3306
  protocol                 = "tcp"
  source_security_group_id = aws_security_group.bastion.id
  security_group_id        = aws_security_group.rds.id
}
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "${var.region}a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "public2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "${var.region}c"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = "${var.region}a"
}

resource "aws_subnet" "private2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "${var.region}c"
}

resource "aws_db_subnet_group" "main" {
  name       = "main"
  subnet_ids = [aws_subnet.private.id, aws_subnet.private2.id]
  tags = {
    Name = "main"
  }
}

variable "region" {
  description = "The AWS region."
  type        = string
  default     = "ap-northeast-1"
}

variable "account_id" {
  description = "The AWS account ID."
  type        = string
  default     = "785460806234"
}

variable "secret_name" {
  description = "The AWS Secrets Manager secret name."
  type        = string
  default     = "secrets"
}

variable "app_name" {
  description = "The App name."
  type        = string
  default     = "mol"
}

variable "db_name" {
  description = "The Database name."
  type        = string
  default     = "online_battle_backend"
}

variable "domain" {
  description = "The Domain name"
  type        = string
  default     = "mol.ninja"
}



terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.30.0"
    }
  }
}
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

resource "aws_vpc_endpoint" "ecr_dkr" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.ecr.dkr"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_vpc_endpoint" "ecr_api" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.ecr.api"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_vpc_endpoint" "s3" {
  vpc_id            = aws_vpc.main.id
  service_name      = "com.amazonaws.${var.region}.s3"
  vpc_endpoint_type = "Gateway"
  route_table_ids   = [aws_route_table.private.id]
}

resource "aws_vpc_endpoint" "cloudwatch_logs" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.logs"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_vpc_endpoint" "secrets_manager" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.secretsmanager"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_vpc_endpoint" "ssmmessages" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.ssmmessages"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_vpc_endpoint" "kms" {
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.kms"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = [aws_subnet.private.id]
  private_dns_enabled = true
  security_group_ids  = [aws_security_group.ecs_tasks.id]
}

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}


resource "aws_eip" "nat" {
}

resource "aws_nat_gateway" "main" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.private.id
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.main.id
  }
}

resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}
