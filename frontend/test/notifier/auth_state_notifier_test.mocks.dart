// Mocks generated by Mockito 5.4.2 from annotations
// in frontend/test/notifier/auth_state_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:frontend/domain/usecase/create_anonymously_user_usecase.dart'
    as _i5;
import 'package:frontend/domain/usecase/get_user_auth_state_usecase.dart'
    as _i3;
import 'package:frontend/presentation/state/auth_state.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserAuthStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserAuthStateUseCase extends _i1.Mock
    implements _i3.GetUserAuthStateUseCase {
  MockGetUserAuthStateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthState> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.AuthState>.value(_FakeAuthState_0(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AuthState>);
}

/// A class which mocks [CreateAnonymouslyUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateAnonymouslyUserUseCase extends _i1.Mock
    implements _i5.CreateAnonymouslyUserUseCase {
  MockCreateAnonymouslyUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthState> call(String? userName) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [userName],
        ),
        returnValue: _i4.Future<_i2.AuthState>.value(_FakeAuthState_0(
          this,
          Invocation.method(
            #call,
            [userName],
          ),
        )),
      ) as _i4.Future<_i2.AuthState>);
}
